import type { BaseTransportOptions, Transport, TransportMakeRequestResponse } from '@sentry/types';
export interface EdgeTransportOptions extends BaseTransportOptions {
    /** Fetch API init parameters. Used by the FetchTransport */
    fetchOptions?: RequestInit;
    /** Custom headers for the transport. Used by the XHRTransport and FetchTransport */
    headers?: {
        [key: string]: string;
    };
}
/**
 * This is a modified promise buffer that collects tasks until drain is called.
 * We need this in the edge runtime because edge function invocations may not share I/O objects, like fetch requests
 * and responses, and the normal PromiseBuffer inherently buffers stuff inbetween incoming requests.
 *
 * A limitation we need to be aware of is that DEFAULT_TRANSPORT_BUFFER_SIZE is the maximum amount of payloads the
 * SDK can send for a given edge function invocation.
 */
export declare class IsolatedPromiseBuffer {
    private readonly _bufferSize;
    $: Array<PromiseLike<TransportMakeRequestResponse>>;
    private _taskProducers;
    constructor(_bufferSize?: number);
    /**
     * @inheritdoc
     */
    add(taskProducer: () => PromiseLike<TransportMakeRequestResponse>): PromiseLike<void>;
    /**
     * @inheritdoc
     */
    drain(timeout?: number): PromiseLike<boolean>;
}
/**
 * Creates a Transport that uses the Edge Runtimes native fetch API to send events to Sentry.
 */
export declare function makeEdgeTransport(options: EdgeTransportOptions): Transport;
//# sourceMappingURL=transport.d.ts.map