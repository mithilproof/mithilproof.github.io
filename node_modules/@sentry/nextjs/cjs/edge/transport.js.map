{"version":3,"file":"transport.js","sources":["../../../src/edge/transport.ts"],"sourcesContent":["import { createTransport } from '@sentry/core';\nimport type { BaseTransportOptions, Transport, TransportMakeRequestResponse, TransportRequest } from '@sentry/types';\nimport { SentryError } from '@sentry/utils';\n\nexport interface EdgeTransportOptions extends BaseTransportOptions {\n  /** Fetch API init parameters. Used by the FetchTransport */\n  fetchOptions?: RequestInit;\n  /** Custom headers for the transport. Used by the XHRTransport and FetchTransport */\n  headers?: { [key: string]: string };\n}\n\nconst DEFAULT_TRANSPORT_BUFFER_SIZE = 30;\n\n/**\n * This is a modified promise buffer that collects tasks until drain is called.\n * We need this in the edge runtime because edge function invocations may not share I/O objects, like fetch requests\n * and responses, and the normal PromiseBuffer inherently buffers stuff inbetween incoming requests.\n *\n * A limitation we need to be aware of is that DEFAULT_TRANSPORT_BUFFER_SIZE is the maximum amount of payloads the\n * SDK can send for a given edge function invocation.\n */\nexport class IsolatedPromiseBuffer {\n  // We just have this field because the promise buffer interface requires it.\n  // If we ever remove it from the interface we should also remove it here.\n  public $: Array<PromiseLike<TransportMakeRequestResponse>> = [];\n\n  private _taskProducers: (() => PromiseLike<TransportMakeRequestResponse>)[] = [];\n\n  public constructor(private readonly _bufferSize: number = DEFAULT_TRANSPORT_BUFFER_SIZE) {}\n\n  /**\n   * @inheritdoc\n   */\n  public add(taskProducer: () => PromiseLike<TransportMakeRequestResponse>): PromiseLike<void> {\n    if (this._taskProducers.length >= this._bufferSize) {\n      return Promise.reject(new SentryError('Not adding Promise because buffer limit was reached.'));\n    }\n\n    this._taskProducers.push(taskProducer);\n    return Promise.resolve();\n  }\n\n  /**\n   * @inheritdoc\n   */\n  public drain(timeout?: number): PromiseLike<boolean> {\n    const oldTaskProducers = [...this._taskProducers];\n    this._taskProducers = [];\n\n    return new Promise(resolve => {\n      const timer = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      void Promise.all(\n        oldTaskProducers.map(taskProducer =>\n          taskProducer().then(null, () => {\n            // catch all failed requests\n          }),\n        ),\n      ).then(() => {\n        // resolve to true if all fetch requests settled\n        clearTimeout(timer);\n        resolve(true);\n      });\n    });\n  }\n}\n\n/**\n * Creates a Transport that uses the Edge Runtimes native fetch API to send events to Sentry.\n */\nexport function makeEdgeTransport(options: EdgeTransportOptions): Transport {\n  function makeRequest(request: TransportRequest): PromiseLike<TransportMakeRequestResponse> {\n    const requestOptions: RequestInit = {\n      body: request.body,\n      method: 'POST',\n      referrerPolicy: 'origin',\n      headers: options.headers,\n      ...options.fetchOptions,\n    };\n\n    return fetch(options.url, requestOptions).then(response => {\n      return {\n        statusCode: response.status,\n        headers: {\n          'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n          'retry-after': response.headers.get('Retry-After'),\n        },\n      };\n    });\n  }\n\n  return createTransport(options, makeRequest, new IsolatedPromiseBuffer(options.bufferSize));\n}\n"],"names":["SentryError","createTransport"],"mappings":";;;;;AAWA,MAAA,6BAAA,GAAA,EAAA,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAA,qBAAA,CAAA;AACA;AACA;AACA,GAAA,MAAA,GAAA,CAAA,IAAA,CAAA,CAAA,GAAA,GAAA,CAAA;AACA;AACA,GAAA,OAAA,GAAA,CAAA,IAAA,CAAA,cAAA,GAAA,GAAA,CAAA;AACA;AACA,GAAA,WAAA,GAAA,WAAA,GAAA,6BAAA,EAAA,CAAA,IAAA,CAAA,WAAA,GAAA,WAAA,CAAA,qBAAA,CAAA,SAAA,CAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,qBAAA,CAAA,SAAA,CAAA,OAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AACA;AACA;AACA;AACA;AACA,GAAA,GAAA,CAAA,YAAA,EAAA;AACA,IAAA,IAAA,IAAA,CAAA,cAAA,CAAA,MAAA,IAAA,IAAA,CAAA,WAAA,EAAA;AACA,MAAA,OAAA,OAAA,CAAA,MAAA,CAAA,IAAAA,iBAAA,CAAA,sDAAA,CAAA,CAAA,CAAA;AACA,KAAA;AACA;AACA,IAAA,IAAA,CAAA,cAAA,CAAA,IAAA,CAAA,YAAA,CAAA,CAAA;AACA,IAAA,OAAA,OAAA,CAAA,OAAA,EAAA,CAAA;AACA,GAAA;AACA;AACA;AACA;AACA;AACA,GAAA,KAAA,CAAA,OAAA,EAAA;AACA,IAAA,MAAA,gBAAA,GAAA,CAAA,GAAA,IAAA,CAAA,cAAA,CAAA,CAAA;AACA,IAAA,IAAA,CAAA,cAAA,GAAA,EAAA,CAAA;AACA;AACA,IAAA,OAAA,IAAA,OAAA,CAAA,OAAA,IAAA;AACA,MAAA,MAAA,KAAA,GAAA,UAAA,CAAA,MAAA;AACA,QAAA,IAAA,OAAA,IAAA,OAAA,GAAA,CAAA,EAAA;AACA,UAAA,OAAA,CAAA,KAAA,CAAA,CAAA;AACA,SAAA;AACA,OAAA,EAAA,OAAA,CAAA,CAAA;AACA;AACA,MAAA,KAAA,OAAA,CAAA,GAAA;AACA,QAAA,gBAAA,CAAA,GAAA,CAAA,YAAA;AACA,UAAA,YAAA,EAAA,CAAA,IAAA,CAAA,IAAA,EAAA,MAAA;AACA;AACA,WAAA,CAAA;AACA,SAAA;AACA,OAAA,CAAA,IAAA,CAAA,MAAA;AACA;AACA,QAAA,YAAA,CAAA,KAAA,CAAA,CAAA;AACA,QAAA,OAAA,CAAA,IAAA,CAAA,CAAA;AACA,OAAA,CAAA,CAAA;AACA,KAAA,CAAA,CAAA;AACA,GAAA;AACA,CAAA;AACA;AACA;AACA;AACA;AACA,SAAA,iBAAA,CAAA,OAAA,EAAA;AACA,EAAA,SAAA,WAAA,CAAA,OAAA,EAAA;AACA,IAAA,MAAA,cAAA,GAAA;AACA,MAAA,IAAA,EAAA,OAAA,CAAA,IAAA;AACA,MAAA,MAAA,EAAA,MAAA;AACA,MAAA,cAAA,EAAA,QAAA;AACA,MAAA,OAAA,EAAA,OAAA,CAAA,OAAA;AACA,MAAA,GAAA,OAAA,CAAA,YAAA;AACA,KAAA,CAAA;AACA;AACA,IAAA,OAAA,KAAA,CAAA,OAAA,CAAA,GAAA,EAAA,cAAA,CAAA,CAAA,IAAA,CAAA,QAAA,IAAA;AACA,MAAA,OAAA;AACA,QAAA,UAAA,EAAA,QAAA,CAAA,MAAA;AACA,QAAA,OAAA,EAAA;AACA,UAAA,sBAAA,EAAA,QAAA,CAAA,OAAA,CAAA,GAAA,CAAA,sBAAA,CAAA;AACA,UAAA,aAAA,EAAA,QAAA,CAAA,OAAA,CAAA,GAAA,CAAA,aAAA,CAAA;AACA,SAAA;AACA,OAAA,CAAA;AACA,KAAA,CAAA,CAAA;AACA,GAAA;AACA;AACA,EAAA,OAAAC,oBAAA,CAAA,OAAA,EAAA,WAAA,EAAA,IAAA,qBAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA,CAAA;AACA;;;;;"}