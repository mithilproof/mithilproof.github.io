{"version":3,"file":"performance.js","sources":["../../../src/client/performance.ts"],"sourcesContent":["import { getCurrentHub } from '@sentry/core';\nimport { WINDOW } from '@sentry/react';\nimport type { Primitive, TraceparentData, Transaction, TransactionContext, TransactionSource } from '@sentry/types';\nimport {\n  baggageHeaderToDynamicSamplingContext,\n  extractTraceparentData,\n  logger,\n  stripUrlQueryAndFragment,\n} from '@sentry/utils';\nimport type { NEXT_DATA as NextData } from 'next/dist/next-server/lib/utils';\nimport { default as Router } from 'next/router';\nimport type { ParsedUrlQuery } from 'querystring';\n\nconst globalObject = WINDOW as typeof WINDOW & {\n  __BUILD_MANIFEST?: {\n    sortedPages?: string[];\n  };\n};\n\ntype StartTransactionCb = (context: TransactionContext) => Transaction | undefined;\n\n/**\n * Describes data located in the __NEXT_DATA__ script tag. This tag is present on every page of a Next.js app.\n */\ninterface SentryEnhancedNextData extends NextData {\n  props: {\n    pageProps?: {\n      _sentryTraceData?: string; // trace parent info, if injected by a data-fetcher\n      _sentryBaggage?: string; // baggage, if injected by a data-fetcher\n      // These two values are only injected by `getStaticProps` in a very special case with the following conditions:\n      // 1. The page's `getStaticPaths` method must have returned `fallback: 'blocking'`.\n      // 2. The requested page must be a \"miss\" in terms of \"Incremental Static Regeneration\", meaning the requested page has not been generated before.\n      // In this case, a page is requested and only served when `getStaticProps` is done. There is not even a fallback page or similar.\n    };\n  };\n}\n\ninterface NextDataTagInfo {\n  route?: string;\n  traceParentData?: TraceparentData;\n  baggage?: string;\n  params?: ParsedUrlQuery;\n}\n\n/**\n * Every Next.js page (static and dynamic ones) comes with a script tag with the id \"__NEXT_DATA__\". This script tag\n * contains a JSON object with data that was either generated at build time for static pages (`getStaticProps`), or at\n * runtime with data fetchers like `getServerSideProps.`.\n *\n * We can use this information to:\n * - Always get the parameterized route we're in when loading a page.\n * - Send trace information (trace-id, baggage) from the server to the client.\n *\n * This function extracts this information.\n */\nfunction extractNextDataTagInformation(): NextDataTagInfo {\n  let nextData: SentryEnhancedNextData | undefined;\n  // Let's be on the safe side and actually check first if there is really a __NEXT_DATA__ script tag on the page.\n  // Theoretically this should always be the case though.\n  const nextDataTag = globalObject.document.getElementById('__NEXT_DATA__');\n  if (nextDataTag && nextDataTag.innerHTML) {\n    try {\n      nextData = JSON.parse(nextDataTag.innerHTML);\n    } catch (e) {\n      __DEBUG_BUILD__ && logger.warn('Could not extract __NEXT_DATA__');\n    }\n  }\n\n  if (!nextData) {\n    return {};\n  }\n\n  const nextDataTagInfo: NextDataTagInfo = {};\n\n  const { page, query, props } = nextData;\n\n  // `nextData.page` always contains the parameterized route - except for when an error occurs in a data fetching\n  // function, then it is \"/_error\", but that isn't a problem since users know which route threw by looking at the\n  // parent transaction\n  // TODO: Actually this is a problem (even though it is not that big), because the DSC and the transaction payload will contain\n  // a different transaction name. Maybe we can fix this. Idea: Also send transaction name via pageProps when available.\n  nextDataTagInfo.route = page;\n  nextDataTagInfo.params = query;\n\n  if (props && props.pageProps) {\n    if (props.pageProps._sentryBaggage) {\n      nextDataTagInfo.baggage = props.pageProps._sentryBaggage;\n    }\n\n    if (props.pageProps._sentryTraceData) {\n      nextDataTagInfo.traceParentData = extractTraceparentData(props.pageProps._sentryTraceData);\n    }\n  }\n\n  return nextDataTagInfo;\n}\n\nconst DEFAULT_TAGS = {\n  'routing.instrumentation': 'next-router',\n} as const;\n\n// We keep track of the active transaction so we can finish it when we start a navigation transaction.\nlet activeTransaction: Transaction | undefined = undefined;\n\n// We keep track of the previous location name so we can set the `from` field on navigation transactions.\n// This is either a route or a pathname.\nlet prevLocationName: string | undefined = undefined;\n\nconst client = getCurrentHub().getClient();\n\n/**\n * Creates routing instrumention for Next Router. Only supported for\n * client side routing. Works for Next >= 10.\n *\n * Leverages the SingletonRouter from the `next/router` to\n * generate pageload/navigation transactions and parameterize\n * transaction names.\n */\nexport function nextRouterInstrumentation(\n  startTransactionCb: StartTransactionCb,\n  startTransactionOnPageLoad: boolean = true,\n  startTransactionOnLocationChange: boolean = true,\n): void {\n  const { route, traceParentData, baggage, params } = extractNextDataTagInformation();\n  prevLocationName = route || globalObject.location.pathname;\n\n  if (startTransactionOnPageLoad) {\n    const source = route ? 'route' : 'url';\n    const dynamicSamplingContext = baggageHeaderToDynamicSamplingContext(baggage);\n\n    activeTransaction = startTransactionCb({\n      name: prevLocationName,\n      op: 'pageload',\n      tags: DEFAULT_TAGS,\n      ...(params && client && client.getOptions().sendDefaultPii && { data: params }),\n      ...traceParentData,\n      metadata: {\n        source,\n        dynamicSamplingContext: traceParentData && !dynamicSamplingContext ? {} : dynamicSamplingContext,\n      },\n    });\n  }\n\n  if (startTransactionOnLocationChange) {\n    Router.events.on('routeChangeStart', (navigationTarget: string) => {\n      const strippedNavigationTarget = stripUrlQueryAndFragment(navigationTarget);\n      const matchedRoute = getNextRouteFromPathname(strippedNavigationTarget);\n\n      let transactionName: string;\n      let transactionSource: TransactionSource;\n\n      if (matchedRoute) {\n        transactionName = matchedRoute;\n        transactionSource = 'route';\n      } else {\n        transactionName = strippedNavigationTarget;\n        transactionSource = 'url';\n      }\n\n      const tags: Record<string, Primitive> = {\n        ...DEFAULT_TAGS,\n        from: prevLocationName,\n      };\n\n      prevLocationName = transactionName;\n\n      if (activeTransaction) {\n        activeTransaction.finish();\n      }\n\n      const navigationTransaction = startTransactionCb({\n        name: transactionName,\n        op: 'navigation',\n        tags,\n        metadata: { source: transactionSource },\n      });\n\n      if (navigationTransaction) {\n        // In addition to the navigation transaction we're also starting a span to mark Next.js's `routeChangeStart`\n        // and `routeChangeComplete` events.\n        // We don't want to finish the navigation transaction on `routeChangeComplete`, since users might want to attach\n        // spans to that transaction even after `routeChangeComplete` is fired (eg. HTTP requests in some useEffect\n        // hooks). Instead, we'll simply let the navigation transaction finish itself (it's an `IdleTransaction`).\n        const nextRouteChangeSpan = navigationTransaction.startChild({\n          op: 'ui.nextjs.route-change',\n          description: 'Next.js Route Change',\n        });\n\n        const finishRouteChangeSpan = (): void => {\n          nextRouteChangeSpan.finish();\n          Router.events.off('routeChangeComplete', finishRouteChangeSpan);\n        };\n\n        Router.events.on('routeChangeComplete', finishRouteChangeSpan);\n      }\n    });\n  }\n}\n\nfunction getNextRouteFromPathname(pathname: string): string | undefined {\n  const pageRoutes = (globalObject.__BUILD_MANIFEST || {}).sortedPages;\n\n  // Page route should in 99.999% of the cases be defined by now but just to be sure we make a check here\n  if (!pageRoutes) {\n    return;\n  }\n\n  return pageRoutes.find(route => {\n    const routeRegExp = convertNextRouteToRegExp(route);\n    return pathname.match(routeRegExp);\n  });\n}\n\n/**\n * Converts a Next.js style route to a regular expression that matches on pathnames (no query params or URL fragments).\n *\n * In general this involves replacing any instances of square brackets in a route with a wildcard:\n * e.g. \"/users/[id]/info\" becomes /\\/users\\/([^/]+?)\\/info/\n *\n * Some additional edgecases need to be considered:\n * - All routes have an optional slash at the end, meaning users can navigate to \"/users/[id]/info\" or\n *   \"/users/[id]/info/\" - both will be resolved to \"/users/[id]/info\".\n * - Non-optional \"catchall\"s at the end of a route must be considered when matching (e.g. \"/users/[...params]\").\n * - Optional \"catchall\"s at the end of a route must be considered when matching (e.g. \"/users/[[...params]]\").\n *\n * @param route A Next.js style route as it is found in `global.__BUILD_MANIFEST.sortedPages`\n */\nfunction convertNextRouteToRegExp(route: string): RegExp {\n  // We can assume a route is at least \"/\".\n  const routeParts = route.split('/');\n\n  let optionalCatchallWildcardRegex = '';\n  if (routeParts[routeParts.length - 1].match(/^\\[\\[\\.\\.\\..+\\]\\]$/)) {\n    // If last route part has pattern \"[[...xyz]]\" we pop the latest route part to get rid of the required trailing\n    // slash that would come before it if we didn't pop it.\n    routeParts.pop();\n    optionalCatchallWildcardRegex = '(?:/(.+?))?';\n  }\n\n  const rejoinedRouteParts = routeParts\n    .map(\n      routePart =>\n        routePart\n          .replace(/^\\[\\.\\.\\..+\\]$/, '(.+?)') // Replace catch all wildcard with regex wildcard\n          .replace(/^\\[.*\\]$/, '([^/]+?)'), // Replace route wildcards with lazy regex wildcards\n    )\n    .join('/');\n\n  return new RegExp(\n    `^${rejoinedRouteParts}${optionalCatchallWildcardRegex}(?:/)?$`, // optional slash at the end\n  );\n}\n"],"names":["WINDOW","logger","extractTraceparentData","getCurrentHub","baggageHeaderToDynamicSamplingContext","Router","stripUrlQueryAndFragment"],"mappings":"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"}