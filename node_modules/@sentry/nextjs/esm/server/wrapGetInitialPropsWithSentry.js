import { _nullishCoalesce, _optionalChain } from '@sentry/utils/esm/buildPolyfills';
import { hasTracingEnabled } from '@sentry/core';
import { getCurrentHub } from '@sentry/node';
import { dynamicSamplingContextToSentryBaggageHeader } from '@sentry/utils';
import { isBuild } from './utils/isBuild.js';
import { withTracedServerSideDataFetcher, getTransactionFromRequest, withErrorInstrumentation } from './utils/wrapperUtils.js';

/**
 * Create a wrapped version of the user's exported `getInitialProps` function
 *
 * @param origGetInitialProps The user's `getInitialProps` function
 * @param parameterizedRoute The page's parameterized route
 * @returns A wrapped version of the function
 */
function wrapGetInitialPropsWithSentry(origGetInitialProps) {
  return new Proxy(origGetInitialProps, {
    apply: async (wrappingTarget, thisArg, args) => {
      if (isBuild()) {
        return wrappingTarget.apply(thisArg, args);
      }

      const [context] = args;
      const { req, res } = context;

      const errorWrappedGetInitialProps = withErrorInstrumentation(wrappingTarget);
      const hub = getCurrentHub();
      const options = _optionalChain([hub, 'access', _ => _.getClient, 'call', _2 => _2(), 'optionalAccess', _3 => _3.getOptions, 'call', _4 => _4()]);

      // Generally we can assume that `req` and `res` are always defined on the server:
      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object
      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher
      // span with each other when there are no req or res objects, we simply do not trace them at all here.
      if (hasTracingEnabled() && req && res && _optionalChain([options, 'optionalAccess', _5 => _5.instrumenter]) === 'sentry') {
        const tracedGetInitialProps = withTracedServerSideDataFetcher(errorWrappedGetInitialProps, req, res, {
          dataFetcherRouteName: context.pathname,
          requestedRouteName: context.pathname,
          dataFetchingMethodName: 'getInitialProps',
        });

        const initialProps

 = await tracedGetInitialProps.apply(thisArg, args);

        const requestTransaction = _nullishCoalesce(getTransactionFromRequest(req), () => ( hub.getScope().getTransaction()));
        if (requestTransaction) {
          initialProps._sentryTraceData = requestTransaction.toTraceparent();

          const dynamicSamplingContext = requestTransaction.getDynamicSamplingContext();
          initialProps._sentryBaggage = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);
        }

        return initialProps;
      } else {
        return errorWrappedGetInitialProps.apply(thisArg, args);
      }
    },
  });
}

/**
 * @deprecated Use `wrapGetInitialPropsWithSentry` instead.
 */
const withSentryServerSideGetInitialProps = wrapGetInitialPropsWithSentry;

export { withSentryServerSideGetInitialProps, wrapGetInitialPropsWithSentry };
//# sourceMappingURL=wrapGetInitialPropsWithSentry.js.map
