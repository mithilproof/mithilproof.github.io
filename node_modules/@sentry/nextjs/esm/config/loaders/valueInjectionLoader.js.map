{"version":3,"file":"valueInjectionLoader.js","sources":["../../../../src/config/loaders/valueInjectionLoader.ts"],"sourcesContent":["import type { LoaderThis } from './types';\n\ntype LoaderOptions = {\n  values: Record<string, unknown>;\n};\n\n/**\n * Set values on the global/window object at the start of a module.\n *\n * Options:\n *   - `values`: An object where the keys correspond to the keys of the global values to set and the values\n *        correspond to the values of the values on the global object. Values must be JSON serializable.\n */\nexport default function valueInjectionLoader(this: LoaderThis<LoaderOptions>, userCode: string): string {\n  // We know one or the other will be defined, depending on the version of webpack being used\n  const { values } = 'getOptions' in this ? this.getOptions() : this.query;\n\n  // We do not want to cache injected values across builds\n  this.cacheable(false);\n\n  // Define some global proxy that works on server and on the browser.\n  let injectedCode = 'var _sentryCollisionFreeGlobalObject = typeof window === \"undefined\" ? global : window;\\n';\n\n  Object.entries(values).forEach(([key, value]) => {\n    injectedCode += `_sentryCollisionFreeGlobalObject[\"${key}\"] = ${JSON.stringify(value)};\\n`;\n  });\n\n  return `${injectedCode}\\n${userCode}`;\n}\n"],"names":[],"mappings":"AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,oBAAA,EAAA,QAAA,EAAA;AACA;AACA,EAAA,MAAA,EAAA,MAAA,EAAA,GAAA,YAAA,IAAA,IAAA,GAAA,IAAA,CAAA,UAAA,EAAA,GAAA,IAAA,CAAA,KAAA,CAAA;AACA;AACA;AACA,EAAA,IAAA,CAAA,SAAA,CAAA,KAAA,CAAA,CAAA;AACA;AACA;AACA,EAAA,IAAA,YAAA,GAAA,2FAAA,CAAA;AACA;AACA,EAAA,MAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA,OAAA,CAAA,CAAA,CAAA,GAAA,EAAA,KAAA,CAAA,KAAA;AACA,IAAA,YAAA,IAAA,CAAA,kCAAA,EAAA,GAAA,CAAA,KAAA,EAAA,IAAA,CAAA,SAAA,CAAA,KAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AACA,GAAA,CAAA,CAAA;AACA;AACA,EAAA,OAAA,CAAA,EAAA,YAAA,CAAA,EAAA,EAAA,QAAA,CAAA,CAAA,CAAA;AACA;;;;"}