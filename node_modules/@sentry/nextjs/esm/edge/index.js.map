{"version":3,"file":"index.js","sources":["../../../src/edge/index.ts"],"sourcesContent":["import { getCurrentHub, getIntegrationsToSetup, initAndBind, Integrations as CoreIntegrations } from '@sentry/core';\nimport type { Options } from '@sentry/types';\nimport {\n  createStackParser,\n  GLOBAL_OBJ,\n  logger,\n  nodeStackLineParser,\n  stackParserFromStackParserOptions,\n} from '@sentry/utils';\n\nimport { getVercelEnv } from '../common/getVercelEnv';\nimport { EdgeClient } from './edgeclient';\nimport { makeEdgeTransport } from './transport';\n\nconst nodeStackParser = createStackParser(nodeStackLineParser());\n\nexport const defaultIntegrations = [new CoreIntegrations.InboundFilters(), new CoreIntegrations.FunctionToString()];\n\nexport type EdgeOptions = Options;\n\n/** Inits the Sentry NextJS SDK on the Edge Runtime. */\nexport function init(options: EdgeOptions = {}): void {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n\n  if (options.dsn === undefined && process.env.SENTRY_DSN) {\n    options.dsn = process.env.SENTRY_DSN;\n  }\n\n  if (options.tracesSampleRate === undefined && process.env.SENTRY_TRACES_SAMPLE_RATE) {\n    const tracesSampleRate = parseFloat(process.env.SENTRY_TRACES_SAMPLE_RATE);\n    if (isFinite(tracesSampleRate)) {\n      options.tracesSampleRate = tracesSampleRate;\n    }\n  }\n\n  if (options.release === undefined) {\n    const detectedRelease = getSentryRelease();\n    if (detectedRelease !== undefined) {\n      options.release = detectedRelease;\n    } else {\n      // If release is not provided, then we should disable autoSessionTracking\n      options.autoSessionTracking = false;\n    }\n  }\n\n  options.environment =\n    options.environment || process.env.SENTRY_ENVIRONMENT || getVercelEnv(false) || process.env.NODE_ENV;\n\n  if (options.autoSessionTracking === undefined && options.dsn !== undefined) {\n    options.autoSessionTracking = true;\n  }\n\n  if (options.instrumenter === undefined) {\n    options.instrumenter = 'sentry';\n  }\n\n  const clientOptions = {\n    ...options,\n    stackParser: stackParserFromStackParserOptions(options.stackParser || nodeStackParser),\n    integrations: getIntegrationsToSetup(options),\n    transport: options.transport || makeEdgeTransport,\n  };\n\n  initAndBind(EdgeClient, clientOptions);\n\n  // TODO?: Sessiontracking\n}\n\n/**\n * Returns a release dynamically from environment variables.\n */\nexport function getSentryRelease(fallback?: string): string | undefined {\n  // Always read first as Sentry takes this as precedence\n  if (process.env.SENTRY_RELEASE) {\n    return process.env.SENTRY_RELEASE;\n  }\n\n  // This supports the variable that sentry-webpack-plugin injects\n  if (GLOBAL_OBJ.SENTRY_RELEASE && GLOBAL_OBJ.SENTRY_RELEASE.id) {\n    return GLOBAL_OBJ.SENTRY_RELEASE.id;\n  }\n\n  return (\n    // GitHub Actions - https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables#default-environment-variables\n    process.env.GITHUB_SHA ||\n    // Netlify - https://docs.netlify.com/configure-builds/environment-variables/#build-metadata\n    process.env.COMMIT_REF ||\n    // Vercel - https://vercel.com/docs/v2/build-step#system-environment-variables\n    process.env.VERCEL_GIT_COMMIT_SHA ||\n    process.env.VERCEL_GITHUB_COMMIT_SHA ||\n    process.env.VERCEL_GITLAB_COMMIT_SHA ||\n    process.env.VERCEL_BITBUCKET_COMMIT_SHA ||\n    // Zeit (now known as Vercel)\n    process.env.ZEIT_GITHUB_COMMIT_SHA ||\n    process.env.ZEIT_GITLAB_COMMIT_SHA ||\n    process.env.ZEIT_BITBUCKET_COMMIT_SHA ||\n    fallback\n  );\n}\n\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport async function close(timeout?: number): Promise<boolean> {\n  const client = getCurrentHub().getClient<EdgeClient>();\n  if (client) {\n    return client.close(timeout);\n  }\n  __DEBUG_BUILD__ && logger.warn('Cannot flush events and disable SDK. No client defined.');\n  return Promise.resolve(false);\n}\n\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId(): string | undefined {\n  return getCurrentHub().lastEventId();\n}\n\n/**\n * Just a passthrough in case this is imported from the client.\n */\nexport function withSentryConfig<T>(exportedUserNextConfig: T): T {\n  return exportedUserNextConfig;\n}\n\nexport { flush } from './utils/flush';\n\nexport * from '@sentry/core';\n\nexport {\n  // eslint-disable-next-line deprecation/deprecation\n  withSentryAPI,\n  wrapApiHandlerWithSentry,\n} from './wrapApiHandlerWithSentry';\n\nexport { wrapApiHandlerWithSentryVercelCrons } from '../common/wrapApiHandlerWithSentryVercelCrons';\n\nexport { wrapMiddlewareWithSentry } from './wrapMiddlewareWithSentry';\n\nexport { wrapServerComponentWithSentry } from './wrapServerComponentWithSentry';\n"],"names":["CoreIntegrations"],"mappings":"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"}